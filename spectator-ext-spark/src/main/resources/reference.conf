
spectator.spark {
  name-patterns = [
    // core/src/main/scala/org/apache/spark/deploy/master/ApplicationSource.scala
    {
      pattern = "^(application)\\.(.+)\\.\\d+\\.([^.]+?)(_MB|_ms)?$"
      name = 3
      tags = {
        "role" = 1
        "appName" = 2
      }
    },

    // core/src/main/scala/org/apache/spark/deploy/master/MasterSource.scala
    // core/src/main/scala/org/apache/spark/deploy/worker/WorkerSource.scala
    {
      pattern = "^(master|worker)\\.([^.]+?)(_MB|_ms)?$"
      name = 2
      tags = {
        "role" = 1
      }
    },

    // core/src/main/scala/org/apache/spark/executor/ExecutorSource.scala
    {
      pattern = "^([^.]+)\\.([^.]+)\\.(executor)\\.(.+?)(_MB|_ms)?$"
      name = 4
      tags = {
        "role" = 3
        "appId" = 1
        "executorId" = 2
      }
    },

    // core/src/main/scala/org/apache/spark/executor/ExecutorSource.scala
    {
      pattern = "^(.+)\\.(executor)\\.(.+?)(_MB|_ms)?$"
      name = 3
      tags = {
        "role" = 2
        "appId" = 1
      }
    },

    // core/src/main/scala/org/apache/spark/scheduler/DAGSchedulerSource.scala
    // core/src/main/scala/org/apache/spark/storage/BlockManagerSource.scala
    {
      pattern = "^([^.]+)\\.<?(driver)>?\\.(DAGScheduler|BlockManager)\\.(.+?)(_MB|_ms)?$"
      name = 4
      tags = {
        "role" = 2
        "appId" = 1
        "source" = 3
      }
    },

    // streaming/src/main/scala/org/apache/spark/streaming/StreamingSource.scala
    // streaming/src/main/scala/org/apache/spark/streaming/scheduler/BatchInfo.scala
    // Note: the .*Delay stats are derived from the .*Time stats. The time stats by themselves
    // aren't that useful sent to the backend.
    {
      pattern = "^([^.]+)\\.<?(driver)>?\\.([^.]+)\\.(StreamingMetrics)\\.(.+Delay)$"
      name = 5
      tags = {
        "role" = 2
        "source" = 4
        "appId" = 1
        "appName" = 3
      }
    },

    // streaming/src/main/scala/org/apache/spark/streaming/StreamingSource.scala
    {
      pattern = "^([^.]+)\\.<?(driver)>?\\.([^.]+)\\.(StreamingMetrics)\\.(.+(?<!Time|Delay))$"
      name = 5
      tags = {
        "role" = 2
        "source" = 4
        "appId" = 1
        "appName" = 3
      }
    },

  ]

  value-conversions = [
    {
      pattern = "^.*_MB$"
      factor = 1.0e6
    },
    {
      pattern = "^.*_ms$"
      factor = 0.001
    },
    {
      pattern = "^.*streaming.*_.*Delay$"
      factor = 0.001
    }
  ]

  // Values that are reported as a guage, but are monotonically increasing and better mapped into
  // a counter for spectator.
  gauge-counters = "^.*streaming\\.total.*$"
}
